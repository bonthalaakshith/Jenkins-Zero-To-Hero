pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh '''
          echo "Pulling latest code from Git repository..."
          git clean -fd
          git reset --hard
          git pull origin main
        '''
      }
    }
    stage('Build and Test') {
      steps {
        sh '''
          echo "Listing project files..."
          ls -ltr
          echo "Building the project..."
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package
        '''
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://172.203.210.217:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "akshithf51/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            echo "Building Docker image..."
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
    environment {
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "bonthalaakshith"
    }
    steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            sh '''
                echo "Updating deployment.yml with build number ${BUILD_NUMBER}..."

                # Configure Git user
                git config user.email "akshith543@gmail.com"
                git config user.name "bonthalaakshith"

                # Clean up untracked files and reset to a clean state
                git reset --hard
                git clean -fd

                # Update deployment file with the new build number
                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                
                echo "Updated deployment.yml:"
                cat java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml  # For debugging

                # Add changes to Git
                git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                
                # Commit changes only if there are any
                git diff-index --quiet HEAD || git commit -m "Update deployment image to version ${BUILD_NUMBER}"

                # Push changes to the main branch
                echo "Pushing changes to GitHub..."
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            '''
        }
    }
}

    stage('Cleanup Docker Containers') {
      steps {
        sh '''
          echo "Stopping and removing unused Docker containers..."
          docker ps -q | xargs -r docker stop
          docker ps -aq | xargs -r docker rm -f
          docker image prune -f
        '''
      }
    }
  }
}
